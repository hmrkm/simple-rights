// Code generated by MockGen. DO NOT EDIT.
// Source: gorm_conn.go

// Package io is a generated GoMock package.
package io

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockGormConn is a mock of GormConn interface.
type MockGormConn struct {
	ctrl     *gomock.Controller
	recorder *MockGormConnMockRecorder
}

// MockGormConnMockRecorder is the mock recorder for MockGormConn.
type MockGormConnMockRecorder struct {
	mock *MockGormConn
}

// NewMockGormConn creates a new mock instance.
func NewMockGormConn(ctrl *gomock.Controller) *MockGormConn {
	mock := &MockGormConn{ctrl: ctrl}
	mock.recorder = &MockGormConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGormConn) EXPECT() *MockGormConnMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGormConn) Create(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGormConnMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGormConn)(nil).Create), value)
}

// DB mocks base method.
func (m *MockGormConn) DB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DB indicates an expected call of DB.
func (mr *MockGormConnMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockGormConn)(nil).DB))
}

// Find mocks base method.
func (m *MockGormConn) Find(destAddr interface{}, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{destAddr}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockGormConnMockRecorder) Find(destAddr interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destAddr}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGormConn)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockGormConn) First(destAddr interface{}, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{destAddr}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockGormConnMockRecorder) First(destAddr interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destAddr}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockGormConn)(nil).First), varargs...)
}

// Joins mocks base method.
func (m *MockGormConn) Joins(query string, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockGormConnMockRecorder) Joins(query interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockGormConn)(nil).Joins), varargs...)
}

// Where mocks base method.
func (m *MockGormConn) Where(query interface{}, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockGormConnMockRecorder) Where(query interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockGormConn)(nil).Where), varargs...)
}
